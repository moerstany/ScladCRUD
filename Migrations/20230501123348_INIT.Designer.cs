// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ScladCRUD.Models;

#nullable disable

namespace ScladCRUD.Migrations
{
    [DbContext(typeof(ScladContext))]
    [Migration("20230501123348_INIT")]
    partial class INIT
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "btree_gin");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "btree_gist");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "citext");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "cube");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "dblink");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "dict_int");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "dict_xsyn");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "earthdistance");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "fuzzystrmatch");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "hstore");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "intarray");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "ltree");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pg_stat_statements");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pg_trgm");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pgcrypto");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pgrowlocks");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pgstattuple");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "tablefunc");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "unaccent");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "xml2");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ScladCRUD.Models.Catalog1", b =>
                {
                    b.Property<int>("IdCatalog")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_catalog");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCatalog"));

                    b.Property<string>("Articul")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("articul");

                    b.Property<int?>("IdProduct")
                        .HasColumnType("integer")
                        .HasColumnName("id_product");

                    b.Property<decimal>("Price")
                        .HasPrecision(9, 2)
                        .HasColumnType("numeric(9,2)")
                        .HasColumnName("price");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("product_name");

                    b.Property<string>("ProductPic")
                        .HasMaxLength(900)
                        .HasColumnType("character varying(900)")
                        .HasColumnName("product_pic");

                    b.HasKey("IdCatalog")
                        .HasName("catalog1_pkey");

                    b.HasIndex("IdProduct");

                    b.ToTable("catalog1");
                });

            modelBuilder.Entity("ScladCRUD.Models.Client1", b =>
                {
                    b.Property<int>("IdClient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_client");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("IdClient"));

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(900)
                        .HasColumnType("character varying(900)")
                        .HasColumnName("avatar");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("client_name");

                    b.Property<string>("Parol")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("parol");

                    b.Property<string>("Post")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("post");

                    b.Property<string>("Tel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("tel");

                    b.HasKey("IdClient")
                        .HasName("client1_pkey");

                    b.ToTable("client1");
                });

            modelBuilder.Entity("ScladCRUD.Models.Manager1", b =>
                {
                    b.Property<int>("IdManager")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_manager");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("IdManager"));

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(900)
                        .HasColumnType("character varying(900)")
                        .HasColumnName("avatar");

                    b.Property<string>("ManagerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("manager_name");

                    b.Property<string>("Parol")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("parol");

                    b.Property<string>("Post")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("post");

                    b.Property<string>("Tel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("tel");

                    b.HasKey("IdManager")
                        .HasName("manager1_pkey");

                    b.ToTable("manager1");
                });

            modelBuilder.Entity("ScladCRUD.Models.Order1", b =>
                {
                    b.Property<int>("IdOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_order");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdOrder"));

                    b.Property<string>("Articul")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("articul");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("client_name");

                    b.Property<int?>("IdClient")
                        .HasColumnType("integer")
                        .HasColumnName("id_client");

                    b.Property<int?>("IdProduct")
                        .HasColumnType("integer")
                        .HasColumnName("id_product");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("product_name");

                    b.Property<int>("Qantity")
                        .HasColumnType("integer")
                        .HasColumnName("qantity");

                    b.HasKey("IdOrder")
                        .HasName("order1_pkey");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdProduct");

                    b.ToTable("order1");
                });

            modelBuilder.Entity("ScladCRUD.Models.Product1", b =>
                {
                    b.Property<int>("IdProduct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_product");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("IdProduct"));

                    b.Property<string>("Articul")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("articul");

                    b.Property<decimal>("Cost")
                        .HasPrecision(9, 2)
                        .HasColumnType("numeric(9,2)")
                        .HasColumnName("cost");

                    b.Property<decimal>("Margin")
                        .HasPrecision(2, 2)
                        .HasColumnType("numeric(2,2)")
                        .HasColumnName("margin");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("product_name");

                    b.Property<string>("ProductPic")
                        .HasMaxLength(900)
                        .HasColumnType("character varying(900)")
                        .HasColumnName("product_pic");

                    b.HasKey("IdProduct")
                        .HasName("product1_pkey");

                    b.ToTable("product1");
                });

            modelBuilder.Entity("ScladCRUD.Models.Catalog1", b =>
                {
                    b.HasOne("ScladCRUD.Models.Product1", "IdProductNavigation")
                        .WithMany("Catalog1")
                        .HasForeignKey("IdProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("catalog1_id_product_fkey");

                    b.Navigation("IdProductNavigation");
                });

            modelBuilder.Entity("ScladCRUD.Models.Order1", b =>
                {
                    b.HasOne("ScladCRUD.Models.Client1", "IdClientNavigation")
                        .WithMany("Order1")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("order1_id_client_fkey");

                    b.HasOne("ScladCRUD.Models.Product1", "IdProductNavigation")
                        .WithMany("Order1")
                        .HasForeignKey("IdProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("order1_id_product_fkey");

                    b.Navigation("IdClientNavigation");

                    b.Navigation("IdProductNavigation");
                });

            modelBuilder.Entity("ScladCRUD.Models.Client1", b =>
                {
                    b.Navigation("Order1");
                });

            modelBuilder.Entity("ScladCRUD.Models.Product1", b =>
                {
                    b.Navigation("Catalog1");

                    b.Navigation("Order1");
                });
#pragma warning restore 612, 618
        }
    }
}
